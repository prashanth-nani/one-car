;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 01-11-2015
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;int number=0;
;
;void lcf(int n)
; 0000 001D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001E if(n==0)
;	n -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001F PORTD=~0b01110111;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0020 if(n==1)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0021 PORTD=~0b00010100;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0022 if(n==2)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0023 PORTD=~0b10110011;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0024 if(n==3)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0025 PORTD=~0b10110110;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0026 if(n==4)
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0027 PORTD=~0b11010100;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0028 if(n==5)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0029 PORTD=~0b11100110;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002A if(n==6)
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002B PORTD=~0b11100111;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 002C if(n==7)
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 002D PORTD=~0b00110100;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002E if(n==8)
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 002F PORTD=~0b11110111;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0030 if(n==9)
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0031 PORTD=~0b11110110;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0032 
; 0000 0033 }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0037 {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0038 // Place your code here
; 0000 0039 
; 0000 003A }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 003E {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 003F // Place your code here
; 0000 0040 
; 0000 0041 }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0046 {
;PCODE: $00000058 VOL: 0
; 0000 0047 // Declare your local variables here
; 0000 0048 
; 0000 0049 // Input/Output Ports initialization
; 0000 004A // Port A initialization
; 0000 004B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004D PORTA=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 004E DDRA=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004F 
; 0000 0050 // Port B initialization
; 0000 0051 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0052 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0053 PORTB=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0054 DDRB=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0055 
; 0000 0056 // Port C initialization
; 0000 0057 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0058 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0059 PORTC=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 005A DDRC=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 005B 
; 0000 005C // Port D initialization
; 0000 005D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005F PORTD=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0060 DDRD=0xFF;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0061 
; 0000 0062 // Timer/Counter 0 initialization
; 0000 0063 // Clock source: System Clock
; 0000 0064 // Clock value: Timer 0 Stopped
; 0000 0065 // Mode: Normal top=0xFF
; 0000 0066 // OC0 output: Disconnected
; 0000 0067 TCCR0=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0068 TCNT0=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0069 OCR0=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 006A 
; 0000 006B // Timer/Counter 1 initialization
; 0000 006C // Clock source: System Clock
; 0000 006D // Clock value: Timer1 Stopped
; 0000 006E // Mode: Normal top=0xFFFF
; 0000 006F // OC1A output: Discon.
; 0000 0070 // OC1B output: Discon.
; 0000 0071 // Noise Canceler: Off
; 0000 0072 // Input Capture on Falling Edge
; 0000 0073 // Timer1 Overflow Interrupt: Off
; 0000 0074 // Input Capture Interrupt: Off
; 0000 0075 // Compare A Match Interrupt: Off
; 0000 0076 // Compare B Match Interrupt: Off
; 0000 0077 TCCR1A=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0078 TCCR1B=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0079 TCNT1H=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 007A TCNT1L=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 007B ICR1H=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 007C ICR1L=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 007D OCR1AH=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 007E OCR1AL=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 007F OCR1BH=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0080 OCR1BL=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0081 
; 0000 0082 // Timer/Counter 2 initialization
; 0000 0083 // Clock source: System Clock
; 0000 0084 // Clock value: Timer2 Stopped
; 0000 0085 // Mode: Normal top=0xFF
; 0000 0086 // OC2 output: Disconnected
; 0000 0087 ASSR=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0088 TCCR2=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0089 TCNT2=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 008A OCR2=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 008B 
; 0000 008C // External Interrupt(s) initialization
; 0000 008D // INT0: On
; 0000 008E // INT0 Mode: Falling Edge
; 0000 008F // INT1: On
; 0000 0090 // INT1 Mode: Rising Edge
; 0000 0091 // INT2: Off
; 0000 0092 GICR|=0xC0;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0093 MCUCR=0x0E;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0094 MCUCSR=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0095 GIFR=0xC0;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0096 
; 0000 0097 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0098 TIMSK=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0099 
; 0000 009A // USART initialization
; 0000 009B // USART disabled
; 0000 009C UCSRB=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 009D 
; 0000 009E // Analog Comparator initialization
; 0000 009F // Analog Comparator: Off
; 0000 00A0 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00A1 ACSR=0x80;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A2 SFIOR=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00A3 
; 0000 00A4 // ADC initialization
; 0000 00A5 // ADC disabled
; 0000 00A6 ADCSRA=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00A7 
; 0000 00A8 // SPI initialization
; 0000 00A9 // SPI disabled
; 0000 00AA SPCR=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00AB 
; 0000 00AC // TWI initialization
; 0000 00AD // TWI disabled
; 0000 00AE TWCR=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00AF 
; 0000 00B0 // Global enable interrupts
; 0000 00B1 #asm("sei")
;PCODE: $000000A2 VOL: 0
	sei
;PCODE: $000000A3 VOL: 0
; 0000 00B2 
; 0000 00B3 while (1)
;PCODE: $000000A4 VOL: 0
; 0000 00B4       {
; 0000 00B5       // Place your code here
; 0000 00B6           if(PINB.0==1)
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00B7           {
; 0000 00B8           number++;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00B9           lcf(number%10);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00BA           delay_ms(100);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00BB           }
; 0000 00BC       }
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00BD }
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
